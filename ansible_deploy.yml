---
- hosts: all
  become: true

  tasks:
    - name: Establish No-Exec Mount in fstab
      mount:
        path: /HostHome
        src: HostHome
        fstype: vboxsf
        opts: _netdev,uid=1000,gid=1000,dmask=0077,fmask=0177
        state: mounted

    - name: Establish Exec Mount in fstab
      mount:
        path: /HostHomeExec
        src: HostHome
        fstype: vboxsf
        opts: _netdev,uid=1000,gid=1000,dmask=0077,fmask=0077
        state: mounted

    - name: User to Use
      set_fact:
        my_user_name: "{{ user_name|default('ubuntu') }}"
        my_pass_word: "{{ user_password|default('SuperSecretPassword') }}"

    - name: Check user details
      getent:
        database: passwd
        key: "{{ my_user_name }}"
        fail_key: False
      register: getent_passwd

    - name: Proceeding with user_status
      debug: var=getent_passwd

    - name: Check user details
      set_fact:
        user_status: ""

    - name: Check user details
      set_fact:
        user_status: "{{ getent_passwd['getent_passwd'][my_user_name] }}"
      when: getent_passwd is defined and getent_passwd['getent_passwd'] is defined

    - name: Proceeding with user_status
      debug: var=user_status

    - name: Check user shadow
      getent:
        database: shadow
        key: "{{ my_user_name }}"
        fail_key: False
        split: ':'
      register: getent_shadow
      when: user_status != ''

    - name: Check user shadow salt
      getent:
        database: shadow
        key: "{{ my_user_name }}"
        fail_key: False
        split: '$'
      register: getent_shadow_salt
      when: user_status != ''

    - name: Create password for comparison
      set_fact:
        debug_user_password: "{{ my_pass_word | password_hash('sha512', getent_shadow_salt['ansible_facts']['getent_shadow'][my_user_name+':'][1]) }}"
      when: getent_shadow_salt is defined and user_status != ''

    - name: Rename user group to make it non-user specific
      lineinfile:
        state: present
        path: /etc/group
        regexp: "^vagrant:(?P<id>[^:]*):1000:(?P<usera>.*)(?P<userb>{{ my_user_name }},vagrant|vagrant,{{ my_user_name }}|{{ my_user_name }}|vagrant|)(?P<userc>.*)$"
        line: 'local_users:\g<id>:1000:\g<usera>{{ my_user_name }},vagrant\g<userc>'
        backrefs: yes
      when: user_status == ''

    - name: Remove legacy "ubuntu" user
      user:
        name: ubuntu
        state: absent
        remove: yes

    - name: Set user record in sudoers
      lineinfile:
        state: present
        path: /etc/sudoers.d/90-cloud-init-users
        line: "{{ my_user_name }} ALL=(ALL) NOPASSWD:ALL"
        owner: root
        group: root
        mode: 0440

    - name: Create user
      user:
        name: "{{ my_user_name }}"
        non_unique: yes
        uid: 1000
        group: 1000
        groups: sudo
        append: yes
        password: "{% if debug_user_password is defined and debug_user_password != '' %}{{ debug_user_password }}{% else %}{{ my_pass_word | password_hash('sha512') }}{% endif %}"
        home: "/home/{{ my_user_name }}"
        update_password: always
        shell: /bin/bash
      when:
        - user_status == '' or debug_user_password is defined

    - name: Create missing paths
      file:
        path: "/home/{{ my_user_name }}{{ item }}"
        state: directory
        owner: 1000
        group: 1000
      with_items: "{{ create_dirs }}"
      when: create_dirs is defined

    - name: Set up links
      file:
        path: "/home/{{ my_user_name }}{{ item.dst }}"
        src: "{{ item.src }}"
        state: link
        force: yes
        owner: 1000
        group: 1000
      with_items: "{{ link_dirs }}"
      when: link_dirs is defined

    - name: Ensure Config Files refer to these links
      lineinfile:
        path: "/home/{{ my_user_name }}{{ item.file }}"
        line: "{{ item.line }}"
        state: present
        owner: 1000
        group: 1000
        mode: 0644
      with_items: "{{ set_env_vars }}"
      when: set_env_vars is defined

    - name: Check if you have any personal scripts
      command: ls files/bin
      register: personal_bin_contents
      ignore_errors: true

    - name: Ensure personal scripts are in the .local
      copy:
        src: files/bin
        dest: "/home/{{ my_user_name }}/.local"
        owner: 1000
        group: 1000
        mode: 0700
      when: personal_bin_contents is succeeded and personal_bin_contents.stdout != ""

    - name: Add tasks to Crontab
      cron:
        name: "{{ item.name }}"
        special_time: "{{ item.special_time|default(omit) }}"
        minute: "{{ item.minute|default(omit) }}"
        hour: "{{ item.hour|default(omit) }}"
        day: "{{ item.day|default(omit) }}"
        month: "{{ item.month|default(omit) }}"
        weekday: "{{ item.weekday|default(omit) }}"
        user: "{{ item.user|default(my_user_name) }}"
        job: "{{ item.command|default(omit) }}"
        env: "{% if item.envvar is defined %}yes{% else %}no{% endif %}"
        value: "{{ item.envvar|default(omit) }}"
      with_items: "{{ set_cron_items }}"
      when: set_cron_items is defined

    - name: Re-ID the existing user
      lineinfile:
        state: present
        path: /etc/passwd
        regexp: '^vagrant:([^:]*):([^:]*):([^:]*):(.*)$'
        line: 'vagrant:\1:999:1000:\4'
        backrefs: yes
      when: user_status == ''

    - name: Install software via Apt
      apt:
        name: "{{ item }}"
        state: latest
      with_items:
      - build-essential
      - libssl-dev
      - libffi-dev
      - python-dev
      - aptitude
      - qemu-utils
      - python-pip

    - name: Install YOUR software via Apt
      apt:
        name: "{{ item.name|default(omit) }}"
        deb: "{{ item.deb|default(omit) }}"
        state: present
      with_items: "{{ install_apt_packages }}"
      when: install_apt_packages is defined

    - name: Add Azure-CLI Signing Key
      apt_key:
        url: https://packages.microsoft.com/keys/microsoft.asc
        state: present

    - name: Add Azure-CLI Repo
      apt_repository:
        repo: "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ {{ ansible_distribution_release }} main"
        filename: azure-cli
        state: present
        update_cache: yes

    - name: Install Azure-CLI
      apt:
        name: azure-cli
        state: present

    - name: Set keyboard layout
      debconf:
        name: "keyboard-configuration"
        question: "keyboard-configuration/{{ item.key }}"
        value: "{{ item.value }}"
        vtype: "{{ item.type|default('string') }}"
      with_items:
      - { key: "altgr", value: "The default for the keyboard layout", vtype: "select" }
      - { key: "compose", value: "No compose key", vtype: "select" }
      - { key: "ctrl_alt_bksp", value: "false", type: "boolean" }
      - { key: "variant", value: "English (UK)", vtype: "select" }
      - { key: "layout", value: "English (UK)", vtype: "select" }
      - { key: "model", value: "Generic 105-key PC (intl.)", vtype: "select" }

    - name: Reconfigure keyboard layout
      command: '/usr/sbin/dpkg-reconfigure --frontend noninteractive keyboard-configuration'
      when: DesktopEnvironment is defined

    - name: Install Desktop Environment
      command: "apt-get install {{ DesktopEnvironment }}^ virtualbox-guest-x11 virtualbox-guest-dkms -y"
      environment:
        DEBIAN_FRONTEND: noninteractive
      args:
        warn: false
      when: DesktopEnvironment is defined

    - name: Install language packs
      apt:
        name: "{{ item }}"
      when: DesktopEnvironment is defined
      with_items:
      - language-pack-en
      - language-pack-en-base

    - name: Install language packs - KDE
      apt:
        name: "{{ item }}"
      when: DesktopEnvironment is defined and DesktopEnvironment == 'kubuntu-desktop'
      with_items:
      - language-pack-kde-en

    - name: Install language packs - Gnome
      apt:
        name: "{{ item }}"
      when: DesktopEnvironment is defined and (DesktopEnvironment == 'ubuntu-desktop' or DesktopEnvironment == 'ubuntu-gnome-desktop')
      with_items:
      - language-pack-gnome-en
      - language-pack-gnome-en-base

    - name: Run a Full Upgrade
      apt:
        upgrade: full
        autoremove: yes
        autoclean: yes

    - name: Install Shade via Pip
      pip:
        name: shade
        version: 1.11.1

    - name: Install other Python libraries
      pip:
        name: "{{item}}"
      with_items:
      - simplejson
      - python-openstackclient
      - ansible
      - pytz

    - name: restart server
      shell: sleep 2 && /sbin/shutdown -r +1 "Rebooting in 1 minute"
      async: 1
      poll: 0

    - name: Reset permissions for the existing user's SSH keys
      file:
        state: file
        path: /home/vagrant/.ssh/authorized_keys
        owner: 999
        group: 1000
        mode: 0600
      when: user_status == ''

    - name: Reset permissions for the existing user
      file:
        state: directory
        path: /home/vagrant
        owner: 999
        group: 1000
        mode: 0700
        recurse: yes
      when: user_status == ''
