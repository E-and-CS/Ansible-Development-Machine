---
- name: Check User Details
  hosts: all
  sudo: yes

  tasks:
    - name: User to Use
      set_fact:
        my_user_name: "{{ user_name|default('ubuntu') }}"
        my_pass_word: "{{ user_password|default('SuperSecretPassword') }}"
        
    - name: Check user details
      getent:
        database: passwd
        key: "{{ my_user_name }}"
        fail_key: False
      register: getent_passwd
      
    - name: Check user details
      set_fact: 
        user_status: "{{ getent_passwd['ansible_facts']['getent_passwd'][my_user_name] }}"

    - name: Proceeding with user_status
      debug: var=user_status

    - name: Check user shadow
      getent:
        database: shadow
        key: "{{ my_user_name }}"
        fail_key: False
        split: ':'
      register: getent_shadow
      when: user_status != ''

    - name: Check user shadow salt
      getent:
        database: shadow
        key: "{{ my_user_name }}"
        fail_key: False
        split: '$'
      register: getent_shadow_salt
      when: user_status != ''
    
    - name: Create password for comparison
      set_fact:
        debug_user_password: "{{ my_pass_word | password_hash('sha512', getent_shadow_salt['ansible_facts']['getent_shadow'][my_user_name+':'][1]) }}"
      when: getent_shadow_salt is defined and user_status != ''

    - name: Rename user group to make it non-user specific
      lineinfile:
        state: present
        path: /etc/group
        regexp: "^ubuntu:(?P<id>[^:]*):1000:(?P<usera>.*)(?P<userb>{{ my_user_name }},ubuntu|ubuntu,{{ my_user_name }}|{{ my_user_name }}|ubuntu|)(?P<userc>.*)$"
        line: 'local_users:\g<id>:1000:\g<usera>{{ my_user_name }},ubuntu\g<userc>'
        backrefs: yes
      when: user_status == ''

- name: Reset user accounts
  hosts: all
  sudo: yes
  
  tasks:
    - name: Set user record in sudoers
      lineinfile:
        state: present
        path: /etc/sudoers.d/90-cloud-init-users
        line: "{{ my_user_name }} ALL=(ALL) NOPASSWD:ALL"
        owner: root
        group: root
        mode: 0440
    
    - name: Create user
      user:
        name: "{{ my_user_name }}"
        non_unique: yes
        uid: 1000
        group: 1000
        groups: sudo
        append: yes
        password: "{% if debug_user_password is defined and debug_user_password != '' %}{{ debug_user_password }}{% else %}{{ my_pass_word | password_hash('sha512') }}{% endif %}"
        home: "/home/{{ my_user_name }}"
        update_password: always
        shell: /bin/bash
      when: 
        - user_status == '' or debug_user_password is defined

    - name: Re-ID the existing user
      lineinfile:
        state: present
        path: /etc/passwd
        regexp: '^ubuntu:([^:]*):([^:]*):([^:]*):(.*)$'
        line: 'ubuntu:\1:1001:1000:\4'
        backrefs: yes
      when: user_status == ''

    - name: Reset permissions for the existing user
      file:
        state: directory
        path: /home/ubuntu
        owner: 1001
        group: 1000
        mode: 0777
        recurse: yes
      when: user_status == ''

    - name: Reset permissions for the existing user's .ssh directory
      file:
        state: directory
        path: /home/ubuntu/.ssh
        owner: 1001
        group: 1000
        mode: 0700
        recurse: yes
      when: user_status == ''

    - name: Reset permissions for the existing user's SSH keys
      file:
        state: file
        path: /home/ubuntu/.ssh/authorized_keys
        owner: 1001
        group: 1000
        mode: 0600
      when: user_status == ''
